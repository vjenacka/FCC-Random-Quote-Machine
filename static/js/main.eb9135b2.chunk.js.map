{"version":3,"sources":["components/QuoteCard/QuoteCard.js","App.js","serviceWorker.js","index.js"],"names":["QuoteCard","quote","author","newQuote","color","id","className","href","target","onClick","App","state","colorArr","quotes","isFetched","quoteIndex","Math","floor","random","randomColor","setState","fetch","then","resp","json","jsonResp","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQA0BeA,G,MAvBG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5C,OACE,yBAAKC,GAAG,aACN,yBAAKC,UAAU,SACb,uBAAGA,UAAS,2BAAsBF,EAAtB,WACZ,0BAAMC,GAAG,OAAOC,UAAS,UAAKF,EAAL,UAAoBH,IAE/C,0BAAMI,GAAG,SAASC,UAAS,UAAKF,EAAL,UAA3B,KAAiDF,GACjD,yBAAKI,UAAU,WACb,uBAAGC,KAAK,2BAA2BC,OAAO,SAASH,GAAG,eACpD,uBAAGC,UAAS,gCAA2BF,EAA3B,YAEd,8BACE,uBAAGE,UAAS,+BAA0BF,EAA1B,YAEd,0BAAMC,GAAG,YAAYI,QAASN,EAAUG,UAAS,UAAKF,IAAtD,iBCqDOM,E,2MAnEbC,MAAQ,CACNC,SAAU,CACR,MACA,OACA,SACA,cACA,SACA,OACA,aACA,OACA,OACA,QACA,SACA,QACA,OACA,eAEFC,OAAQ,GACRZ,MAAO,GACPC,OAAQ,GACRY,WAAW,EACXV,MAAO,I,EAqBTD,SAAW,WACT,IAAMY,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAcH,KAAKC,MAAsB,GAAhBD,KAAKE,UACpC,EAAKE,SAAS,CACZnB,MAAO,EAAKU,MAAME,OAAOE,GAAYd,MACrCC,OAAQ,EAAKS,MAAME,OAAOE,GAAYb,OACtCE,MAAM,EAAKO,MAAMC,SAASO,M,mFAzBT,IAAD,OAClBE,MACE,0IAECC,KAAK,SAAAC,GACJ,OAAOA,EAAKC,SAEbF,KAAK,SAAAG,GACJ,IAAMV,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAcH,KAAKC,MAAsB,GAAhBD,KAAKE,UACpC,EAAKE,SAAS,CACZP,OAAQY,EAASZ,OACjBZ,MAAOwB,EAASZ,OAAOE,GAAYd,MACnCC,OAAQuB,EAASZ,OAAOE,GAAYb,OACpCY,WAAY,EAAKH,MAAMG,UACvBV,MAAM,EAAKO,MAAMC,SAASO,S,+BAchC,OACE,yBAAKb,UAAS,cAASoB,KAAKf,MAAMP,QAC/BsB,KAAKf,MAAMG,WACV,kBAAC,EAAD,CACEb,MAAOyB,KAAKf,MAAMV,MAClBC,OAAQwB,KAAKf,MAAMT,OACnBC,SAAUuB,KAAKvB,SACfC,MAAOsB,KAAKf,MAAMP,a,GA5DZuB,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,gB","file":"static/js/main.eb9135b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./QuoteCard.css\";\r\n\r\nconst QuoteCard = ({ quote, author, newQuote, color }) => {\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <div className=\"quote\">\r\n        <i className={`fa fa-quote-left ${color}-text`}/>\r\n        <span id=\"text\" className={`${color}-text`}>{quote}</span>\r\n      </div>\r\n      <span id=\"author\" className={`${color}-text`}>- {author}</span>\r\n      <div className=\"buttons\">\r\n        <a href=\"twitter.com/intent/tweet\" target=\"_blank\" id=\"tweet-quote\">\r\n          <i className={`fab fa-twitter-square ${color}-text`} />\r\n        </a>\r\n        <span>\r\n          <i className={`fab fa-tumblr-square ${color}-text`} />\r\n        </span>\r\n        <span id=\"new-quote\" onClick={newQuote} className={`${color}`}>\r\n          New quote\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteCard;\r\n","import React from \"react\";\nimport QuoteCard from \"./components/QuoteCard/QuoteCard\";\n\nclass App extends React.Component {\n  state = {\n    colorArr: [\n      \"red\",\n      \"pink\",\n      \"purple\",\n      \"deep-purple\",\n      \"indigo\",\n      \"blue\",\n      \"light-blue\",\n      \"cyan\",\n      \"teal\",\n      \"green\",\n      \"orange\",\n      \"amber\",\n      'grey',\n      'deep-orange'\n    ],\n    quotes: [],\n    quote: \"\",\n    author: \"\",\n    isFetched: false,\n    color: \"\"\n  };\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n      .then(resp => {\n        return resp.json();\n      })\n      .then(jsonResp => {\n        const quoteIndex = Math.floor(Math.random() * 102);\n        const randomColor=  Math.floor(Math.random() * 13);\n        this.setState({\n          quotes: jsonResp.quotes,\n          quote: jsonResp.quotes[quoteIndex].quote,\n          author: jsonResp.quotes[quoteIndex].author,\n          isFetched: !this.state.isFetched,\n          color:this.state.colorArr[randomColor]\n        });\n      });\n  }\n  newQuote = () => {\n    const quoteIndex = Math.floor(Math.random() * 102);\n    const randomColor=  Math.floor(Math.random() * 13);\n    this.setState({\n      quote: this.state.quotes[quoteIndex].quote,\n      author: this.state.quotes[quoteIndex].author,\n      color:this.state.colorArr[randomColor]\n    });\n  };\n  render() {\n    return (\n      <div className={`App ${this.state.color}`}>\n        {this.state.isFetched && (\n          <QuoteCard\n            quote={this.state.quote}\n            author={this.state.author}\n            newQuote={this.newQuote}\n            color={this.state.color}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}